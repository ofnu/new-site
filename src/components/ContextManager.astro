---
// src/components/ContextManager.astro
import ProjectsContext from './contexts/ProjectsContext.astro';
import GalleryContext from './contexts/GalleryContext.astro';
---

<div class="context-manager">
  <div class="context above">
    <ProjectsContext />
  </div>
  
  <div class="context main" id="main-context">
    <slot />
  </div>
  
  <div class="context below">
    <GalleryContext />
  </div>

  <div class="scroll-indicator">
    <div class="chevron"></div>
  </div>
</div>

<style>
  .context-manager {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    overflow: hidden;
  }

  .context {
    position: absolute;
    width: 100%;
    height: 100vh;
    transition: transform 0.5s ease-out;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .above {
    transform: translateY(-100vh);
  }

  .main {
    transform: translateY(0);
  }

  .below {
    transform: translateY(100vh);
  }

  .scroll-indicator {
    position: fixed;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 9999;
    opacity: 1;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  .chevron {
    width: 20px;
    height: 20px;
    border-style: solid;
    border-width: 0.25em 0.25em 0 0;
    transform: rotate(135deg);
    border-color: rgba(255, 255, 255, 0.8);
    animation: bounce 2s infinite;
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0) rotate(135deg);
    }
    40% {
      transform: translateY(-10px) rotate(135deg);
    }
    60% {
      transform: translateY(-5px) rotate(135deg);
    }
  }
</style>

<script>
  // Touch handling variables
  let touchStartY = 0;
  let touchStartX = 0;
  
  // Context management
  let currentContext = 1; // 0: above, 1: main, 2: below
  let isTransitioning = false;
  
  // Get all contexts as HTMLElements
  const contexts = Array.from(document.querySelectorAll('.context')) as HTMLElement[];

  function switchContext(direction: number) {
    if (isTransitioning) return;
    
    const newContext = currentContext + direction;
    if (newContext < 0 || newContext >= contexts.length) return;

    isTransitioning = true;
    currentContext = newContext;

    contexts.forEach((context, index) => {
      const offset = (index - currentContext) * 100;
      context.style.transform = `translateY(${offset}vh)`;
    });

    setTimeout(() => {
      isTransitioning = false;
    }, 500);

    // Hide scroll indicator after first scroll
    const indicator = document.querySelector('.scroll-indicator') as HTMLElement;
    if (indicator) {
      indicator.style.opacity = '0';
    }
  }

  // Desktop scroll handling
  document.addEventListener('wheel', (e) => {
    e.preventDefault();
    const direction = e.deltaY > 0 ? 1 : -1;
    switchContext(direction);
  }, { passive: false });

  // Mobile touch handling
  document.addEventListener('touchstart', (e) => {
    touchStartY = e.touches[0].clientY;
    touchStartX = e.touches[0].clientX;
  });

  document.addEventListener('touchend', (e) => {
    const touchEndY = e.changedTouches[0].clientY;
    const touchEndX = e.changedTouches[0].clientX;
    
    const deltaY = touchStartY - touchEndY;
    const deltaX = touchStartX - touchEndX;
    
    // If horizontal swipe is greater than vertical, ignore
    if (Math.abs(deltaX) > Math.abs(deltaY)) return;
    
    if (Math.abs(deltaY) > 50) { // Minimum swipe distance
      const direction = deltaY > 0 ? 1 : -1;
      switchContext(direction);
    }
  });
</script>