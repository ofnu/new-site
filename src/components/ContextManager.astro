---
import SecretContext from './contexts/SecretContext.astro';
import ShellContext from './contexts/ShellContext.astro';
import ProjectsContext from './contexts/ProjectsContext.astro';
---

<div class="context-manager">
  <div class="snap-container" id="snap-container">
    <div class="context" id="secret">
      <SecretContext />
    </div>
    
    <div class="context" id="main">
      <slot />
    </div>
    
    <div class="context" id="shell">
      <ShellContext />
    </div>

    <div class="context" id="projects">
      <ProjectsContext />
    </div>
  </div>

  <div class="scroll-indicator">
    <div class="indicator up" aria-label="Scroll up">
      <div class="chevron"></div>
      <div class="label-wrapper">
        <span class="label">Previous</span>
      </div>
    </div>
    <div class="indicator down" aria-label="Scroll down">
      <div class="label-wrapper">
        <span class="label">Next</span>
      </div>
      <div class="chevron"></div>
    </div>
  </div>
</div>

<style>
  .context-manager {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    overflow: hidden;
    --card-width: min(600px, 80vw);
    --margin-width: calc((100vw - var(--card-width)) / 2);
    --indicator-width: 3rem;
    --transition-duration: 0.3s;
    --transition-timing: ease;
  }

  .snap-container {
    height: 100vh;
    overflow-y: scroll;
    scroll-snap-type: y mandatory;
    scroll-behavior: smooth;
  }

  .context {
    height: 100vh;
    width: 100%;
    scroll-snap-align: center;
    scroll-snap-stop: always;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .snap-container::-webkit-scrollbar {
    display: none;
  }

  .snap-container {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .scroll-indicator {
    position: fixed;
    right: calc((var(--margin-width) - var(--indicator-width)) / 2);
    top: 50%;
    transform: translateY(-50%);
    display: flex;
    flex-direction: column;
    gap: 2rem;
    z-index: 9999;
    pointer-events: none;
    width: var(--indicator-width);
  }

  .indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    opacity: 0;
    transition: opacity var(--transition-duration) var(--transition-timing);
  }

  .indicator.active {
    opacity: 0.5;
  }

  .indicator:hover {
    opacity: 1;
  }

  .chevron {
    width: 12px;
    height: 12px;
    border-style: solid;
    border-width: 2px 2px 0 0;
    border-color: rgba(255, 255, 255, 0.8);
  }

  .indicator.up .chevron {
    transform: rotate(315deg);
  }

  .indicator.down .chevron {
    transform: rotate(135deg);
  }

  .label-wrapper {
    height: 1.2em;
    overflow: hidden;
    position: relative;
  }

  .label {
    font-family: monospace;
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.8);
    text-transform: lowercase;
    display: block;
    text-align: center;
    transition: opacity 0.15s ease;
  }

  .label.fade-out {
    opacity: 0;
  }

  @media (prefers-reduced-motion: reduce) {
    .snap-container {
      scroll-behavior: auto;
    }
    
    .label, .indicator {
      transition: none;
    }
  }

  @media (max-width: 1200px) {
    .label {
      font-size: 0.7rem;
    }
  }

  @media (max-width: 1000px) {
    .label {
      opacity: 0.7;
    }
  }

  @media (max-width: 900px) {
    .label {
      opacity: 0.4;
    }
  }

  @media (max-width: 800px) {
    .label {
      opacity: 0;
      font-size: 0;
    }

    .indicator {
      transform: scale(0.9);
    }
  }
</style>

<script>
  const CONTEXT_LABELS: Record<string, string> = {
    main: 'Home',
    shell: 'Shell',
    projects: 'Projects'
  };

  function updateLabel(indicator: Element, newText: string) {
    const label = indicator.querySelector('.label');
    if (!label) return;

    label.classList.add('fade-out');

    setTimeout(() => {
      label.textContent = newText;
      label.classList.remove('fade-out');
    }, 100);
  }

  function updateScrollIndicators() {
    const container = document.querySelector('.snap-container') as HTMLElement;
    const upIndicator = document.querySelector('.indicator.up');
    const downIndicator = document.querySelector('.indicator.down');
    
    if (!container || !downIndicator || !upIndicator) return;

    const contexts = Array.from(container.querySelectorAll('.context'));
    
    const currentIndex = contexts.findIndex(context => {
      const rect = context.getBoundingClientRect();
      return Math.abs(rect.top) < window.innerHeight / 2;
    });

    if (currentIndex === -1) {
      upIndicator.classList.remove('active');
      downIndicator.classList.remove('active');
      return;
    }

    upIndicator.classList.remove('active');
    downIndicator.classList.remove('active');

    if (currentIndex === 0) return;

    if (currentIndex > 1) {
      const prevContext = contexts[currentIndex - 1];
      const prevId = prevContext.id;
      const labelText = CONTEXT_LABELS[prevId] || prevId;
      upIndicator.classList.add('active');
      const currentLabel = upIndicator.querySelector('.label');
      if (currentLabel?.textContent !== labelText) {
        updateLabel(upIndicator, labelText);
      }
    }

    if (currentIndex < contexts.length - 1) {
      const nextContext = contexts[currentIndex + 1];
      const nextId = nextContext.id;
      const labelText = CONTEXT_LABELS[nextId] || nextId;
      downIndicator.classList.add('active');
      const currentLabel = downIndicator.querySelector('.label');
      if (currentLabel?.textContent !== labelText) {
        updateLabel(downIndicator, labelText);
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const mainContext = document.querySelector('#main');
    if (mainContext) {
      mainContext.scrollIntoView({ behavior: 'instant' });
    }

    const container = document.querySelector('.snap-container');
    if (container) {
      container.addEventListener('scroll', updateScrollIndicators);
      updateScrollIndicators();
    }
  });
</script>