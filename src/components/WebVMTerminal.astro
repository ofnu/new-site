---
---

<div class="webvm-container">
  <div id="webvm-terminal"></div>
  <div id="webvm-status" class="status-bar"></div>
</div>

<style>
  .webvm-container {
    width: 100%;
    height: 100%;
    background: var(--bg-terminal);
    border-radius: 4px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  #webvm-terminal {
    flex: 1;
    min-height: 0;
    padding: 0.5rem;
    font-family: var(--font-mono);
    font-size: 14px;
    line-height: 1.2;
  }

  .status-bar {
    height: 24px;
    background: var(--bg-secondary);
    border-top: 1px solid var(--border-color);
    padding: 0 0.5rem;
    display: flex;
    align-items: center;
    font-size: 12px;
    color: var(--text-secondary);
  }
</style>

<script>
  import { WebContainer } from '@webcontainer/api';
  import { Terminal } from '@xterm/xterm';
  import { FitAddon } from '@xterm/addon-fit';
  import '@xterm/xterm/css/xterm.css';

  let webcontainerInstance: WebContainer;
  
  // Initialize WebContainer when the component mounts
  async function initializeWebContainer() {
    const terminal = new Terminal({
      convertEol: true,
      fontFamily: 'var(--font-mono)',
      fontSize: 14,
      theme: {
        background: '#121314',
        foreground: '#ffffff',
        cursor: '#ffffff'
      }
    });

    const terminalElement = document.getElementById('webvm-terminal');
    if (!terminalElement) return;

    terminal.open(terminalElement);

    const fitAddon = new FitAddon();
    terminal.loadAddon(fitAddon);
    fitAddon.fit();

    try {
      if (!crossOriginIsolated) {
        throw new Error('Cross-Origin Isolation must be enabled');
      }
      
      console.log('Booting WebContainer...');
      // Initialize the WebContainer with proper options
      webcontainerInstance = await WebContainer.boot({
        workdirPath: '/home/user',
        mountPoints: ['/home/user']
      });
      
      console.log('Mounting files...');
      // Mount the files with proper structure
      await webcontainerInstance.mount({
        'home': {
          directory: {
            'user': {
              directory: {
                '.bashrc': {
                  file: {
                    contents: 'PS1="\\w $ "\n'
                  }
                }
              }
            }
          }
        }
      });

      // Start a shell process
      const shellProcess = await webcontainerInstance.spawn('sh', {
        terminal: {
          cols: terminal.cols,
          rows: terminal.rows,
        },
      });

      // Pipe the shell process to the terminal
      shellProcess.output.pipeTo(
        new WritableStream({
          write(data) {
            terminal.write(data);
          },
        })
      );

      // Pipe terminal input to the shell process
      const input = shellProcess.input.getWriter();
      terminal.onData((data) => {
        input.write(data);
      });

      document.getElementById('webvm-status').textContent = 'Ready';
    } catch (error) {
      console.error('Failed to initialize WebContainer:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      terminal.write(`\r\nWebContainer initialization failed: ${errorMessage}\r\n`);
      document.getElementById('webvm-status').textContent = 'Failed to initialize';
      document.getElementById('webvm-status').style.color = 'var(--text-error)';
    }
  }

  // Call initialize function when component mounts
  window.addEventListener('load', initializeWebContainer);
</script>
